/**
 * @file hyperneat.hpp
 * @author Bang Liu
 *
 * Definition of the HyperNEAT class.
 */
#ifndef MLPACK_METHODS_NE_HYPERNEAT_HPP
#define MLPACK_METHODS_NE_HYPERNEAT_HPP

#include <mlpack/core.hpp>

#include "link_gene.hpp"
#include "neuron_gene.hpp"
#include "genome.hpp"
#include "species.hpp"
#include "population.hpp"
#include "tasks.hpp"
#include "parameters.hpp"
#include "neat.hpp"
#include "substrate.hpp"

namespace mlpack {
namespace ne {

/**
 * This class defines HyperNEAT.
 */
class HyperNEAT : public NEAT
{
 public:
  /**
   * Parametric constructor.
   *
   * @param task The task to solve.
   * @param substrate The substrate configuration for the task.
   * @param seedGenome The genome to initialize population.
   * @param params The Parameter object that contains algorithm parameters.
   */
  HyperNEAT(TaskType task, Substrate& substrate, Genome& seedGenome, Parameters& params)
  {
    aTask = task;
    aSeedGenome = seedGenome;
    aNextNeuronId = seedGenome.NumNeuron();
    aNextLinkInnovId = seedGenome.NumLink();
    aPopulationSize = params.aPopulationSize;
    aMaxGeneration = params.aMaxGeneration;
    aCoeffDisjoint = params.aCoeffDisjoint;
    aCoeffWeightDiff = params.aCoeffWeightDiff;
    aCompatThreshold = params.aCompatThreshold;
    aStaleAgeThreshold = params.aStaleAgeThreshold;
    aCrossoverRate = params.aCrossoverRate;
    aCullSpeciesPercentage = params.aCullSpeciesPercentage;
    aMutateWeightProb = params.aMutateWeightProb;
    aPerturbWeightProb = params.aPerturbWeightProb;
    aMutateWeightSize = params.aMutateWeightSize;
    aMutateAddForwardLinkProb = params.aMutateAddForwardLinkProb;
    aMutateAddBackwardLinkProb = params.aMutateAddBackwardLinkProb;
    aMutateAddRecurrentLinkProb = params.aMutateAddRecurrentLinkProb;
    aMutateAddBiasLinkProb = params.aMutateAddBiasLinkProb;
    aMutateAddNeuronProb = params.aMutateAddNeuronProb;
    aMutateEnabledProb = params.aMutateEnabledProb;
    aMutateDisabledProb = params.aMutateDisabledProb;
    aNumSpeciesThreshold = params.aNumSpeciesThreshold;
    aSubstratePanel = substrate;  // New member compared with NEAT.
  }

  /**
   * Destructor.
   */
  ~NEAT() {}

  /**
   * Evaluate genomes in population. 
   * Set genomes' fitness, species' and population's best fitness and genome.
   *
   * This is the key difference with NEAT. Thus need to override it.
   * Rather than evaluate each genome in population directly, we need to query 
   * the substrate to decide the connections in the substrate, and evaluate the 
   * substrate genome.
   */
  void Evaluate()
  {
  	Genome genome;  // The genome generated by the substrate.
  	aSubstrate.InitGenome(genome);

    for (int i=0; i<aPopulation.aSpecies.size(); ++i)
    {
      for (int j=0; j<aPopulation.aSpecies[i].aGenomes.size(); ++j)
      {
        aPopulation.aSpecies[i].aGenomes[j].Flush();
        aSubstrate.QueryLink(aPopulation.aSpecies[i].aGenomes[j], genome);  // Query weight.

        double fitness = aTask.EvalFitness(genome);  // Evaluate genome generated by substrate.
        aPopulation.aSpecies[i].aGenomes[j].Fitness(fitness);
      }

      double oldSpeciesBestFitness = aPopulation.aSpecies[i].BestFitness();
      aPopulation.aSpecies[i].SetBestFitnessAndGenome();
      double newSpeciesBestFitness = aPopulation.aSpecies[i].BestFitness();
      if (newSpeciesBestFitness < oldSpeciesBestFitness)
      {
        aPopulation.aSpecies[i].StaleAge(0);
      } else
      {
        int staleAge = aPopulation.aSpecies[i].StaleAge();
        aPopulation.aSpecies[i].StaleAge(staleAge + 1);
      }
    }
    aPopulation.SetBestFitnessAndGenome();
  }

 private:
  // Substrate.
  Substrate aSubstrate;

};

}  // namespace ne
}  // namespace mlpack

#endif  // MLPACK_METHODS_NE_HYPERNEAT_HPP